./ ADD NAME=$README$ 0102-01157-01270-1116-00025-00046-00000-PST0705
Installation / readme for DSN4DD / VOL4DD / JFCB4DD

There are 4 component for this package

MACRO    Is the Assembler macro named ID required to assemble the
         assembler routine. Put it into a library included in your
         SYSLIB concatenation for the assembly.

SOURCE   Is the single Assembler source deck of the function.

LINKEDT  Is the linkage editor control statements to build the
         load module and its aliases

HELP     Is a two part document. Part 1 describes how to use DSN4DD.
         Part 2 describes how to use VOL4DD.

Making DSN4DD available to your rexx program can be as simple as
link editing it to a load library that is within the JOBLIB/STEPLIB
concatenation when the rexx program runs. Myself, I have built a Rexx
function package under the name IRXFLOC which contains all the
assembler written rexx functions for the platform. VOL4DD had not been
tested as a loadmodule alias but it does execute properly from the
function package.

The HELP documentation should provide all the usage notes required.
./ ADD NAME=HELP     0106-96073-01270-1108-00143-00063-00000-PST0705
 Name:        DSN4DD

 Purpose:     Return the name of (a concatenation level of) a dataset
              for a specified DDname.

 Environment: REXX subroutine/function for all MVS/ESA environments.
              DSN4DD resides in the IRXFLOC "function package".

 Features:    The value of the DSN is returned as per the invocation
              contruct.

              The REXX variable RC is set to the number of concatenation
              levels for the DD.

 Argument:    The DDname for which the dataset name is required.

              The DDname can be further qualified with a suffix in
              format  +n  where "n" is a number relative to 1 of
              the concatenation within the DDname.


 Results:     DSN4DD operates as a REXX subroutine/function. When used
              as a subroutine, the caller retrieves the value from the
              REXX variable RESULT. When used as a function, REXX makes
              the requested assignment from the context of REXX
              statement which invoked it.

              DSN4DD always sets the REXX variable RC. For a request
              which is matched without error, RC is asigned the number
              of datasets which are concatenated together. If there is
              no concatenation, RC will be assigned the value one.

 Errors/Warnings:
              If the DDNAME is not allocated or the argument is missing,
              RC will be assigned the value of minus one and the result
              will be null.

              If the DDNAME is allocated but the requested concatenation
              level is invalid or beyond the allocated concatenation
              level, the 'result' will be null and RC is assigned the
              number of datasets allocated within the concatenation
              level.

 Examples: 1. say dsn4dd('SYSPROC+1')  ==> TCS0TSO.SYSTEM.FUNCLIB

           2. Identify the members (and the library) which have
              multiple versions in the set of a concatenated DD.
                 dd = 'SYSUT1'
                 dsn.0 = dsn4dd(dd)
                 concat_count = rc
                 do i = 1 to concat_count-1; dsn.i = dsn4dd(dd'+'i); end
                 call sccpdsd dd, '*', 'D.' /* build member list */
                 do i = 1 to d.0-1
                      ii = i + 1
                      if left(d.i,8) == left(d.ii,8) then
                        do
                           parse value spfdir(d.i) with mem concat .
                           ? = mem 'exists in' dsn.concat
                           do while left(d.i,8) == left(d.ii,8)
                                concat = c2d(substr(d.ii,12,1))
                                ? = ? dsn.concat
                                i = ii
                                ii = ii + 1
                           end
                           say ?
                        end
                 end

 Notes:       If the DDname is allocated to a member of a partitioned
              dataset, the member name is included in the result. This
              makes DSN4DD distinct from the TSO LISTF command.











 Name:        VOL4DD

 Purpose:     Return the volume serial number(s) of (a concatenation
              level of) a dataset for a specified DDname.

 Environment: REXX subroutine/function for all MVS/ESA environments.
              VOL4DD resides in the IRXFLOC "function package".

 Features:    The value of the volume serial number is returned as
              per the invocation construct.

              The REXX variable RC is set to the number of
              concatenation levels for the DD.

 Argument:    The DDname for which the dataset name is required.

              The DDname can be further qualified with a suffix in
              format  +n  where "n" is a number relative to 1 of
              the concatenation within the DDname.


 Results:     VOL4DD operates as a REXX subroutine/function. When
              used as a subroutine, the caller retrieves the value
              from the REXX variable RESULT. When used as a
              function, REXX makes the requested assignment from the
              context of REXX statement which invoked it.

              If the specified DDname is allocated to multiple volumes,
              VOL4DD returns a character string listing the volume
              serial numbers separated by commas. If the DDname is
              allocated to more than 5 volumes, only the first five
              are listed by VOL4DD.

              VOL4DD always sets the REXX variable RC. For a request
              which is matched without error, RC is asigned the number
              of datasets which are concatenated together. If there is
              no concatenation, RC will be assigned the value one.

 Errors/Warnings:
              If the DDNAME is not allocated or the argument is missing,
              RC will be assigned the value of minus one and the result
              will be null.

              If the DDNAME is allocated but the requested concatenation
              level is invalid or beyond the allocated concatenation
              level, the 'result' will be null and RC is assigned the
              number of datasets allocated within the concatenation
              level.

 Examples: 1. say VOL4dd('SYSPROC+1')  ==> ST3S03











./ ADD NAME=LINKEDT  0100-01270-01270-1123-00005-00005-00000-PST0705
 INCLUDE _______(DSN4DD)
 ENTRY DSN4DD
 ALIAS VOL4DD
 ALIAS JFCB4DD
 NAME DSN4DD(R)
./ ADD NAME=MACRO    0102-98050-98050-1606-00049-00046-00000-PST0705
         MACRO
&LABEL   ID    &USING,&CSECT=YES,&AMODE=31,&RMODE=ANY
         LCLC  &U,&LBL
.*
.* Stelco macro used to:
.*    - generate the CSECT statement.
.*    - generate the USING, AMODE and RMODE statements for the CSECT.
.*    - generate an eye-catcher and date/time stamp (28 bytes total).
.*      (The values for date and time are the time of the Assembly.)
.*
.* The default for the USING statement is (register) 15.
.* Other defaults are as per the prototype above.
.*
.* If the CSECT requires multiple base registers, their specification
.* must be enclosed in parenthesis.       e.g.  BIGRTN   ID     (12,11)
.*
.* This macro can also be used to generate only the eye-catcher and
.* date/time stamp. For this type of usage specify   ID    ,CSECT=NO
.*
.* -----------------------Modification History-------------------------
.* 98-02-19 change from &SYSDATE to &SYSDATC
.*
&U       SETC  '15'
&LBL     SETC  ' '
         AIF   (K'&LABEL EQ 0).LBLSET
&LBL     SETC  '&LABEL'
.LBLSET  ANOP
         AIF   (T'&USING EQ 'O').USET
         AIF   ('&USING'(1,1) NE '(').ONEUSE
&U       SETC  '&USING'(2,K'&USING-2)
         AGO   .USET
.ONEUSE  ANOP
&U       SETC  '&USING'
.USET    ANOP
         AIF   ('&CSECT' EQ 'YES').CSECT
&LBL     DS    0H
         B     *+32
         AGO   .STAMP
.CSECT   ANOP
&LBL     CSECT
&LBL     AMODE &AMODE
&LBL     RMODE &RMODE
         USING &LABEL,&U
         BC    15,32(,15)
.STAMP   ANOP
         DS    CL4
         DC    CL8'&LBL'
         DC    CL16'&SYSDATC &SYSTIME'
         MEND
./ ADD NAME=SOURCE   0100-07040-07040-0844-00421-00421-00000-PST0705
DSN4DD   TITLE            '<< REXX - Obtain JFCB information for a DD  X
                                                      Documentation >>'
* Name:        DSN4DD   VOL4DD   JFCB4DD
*
* Purpose:     See %QWT R=______   for the related user documentation.
*
* This program scans the TIOT for the specified DDname and from
* there obtains the JFCB for the requested data.
*
* The number of concatenation levels for the specified DDname is
* returned in the REXX variable RC.
* (RC is set to -1 if the DDname is not allocated.)
*
* The entry point determines the field to be extracted from the JFCB.
*
* Modification history:
*    May 2004 - Use SWA manager to determine the JFCB address.
*
         TITLE            '<< REXX - Obtain JFCB information for a DD  X
                              System Linkage for entry point DSN4DD >>'
* Entry point DSN4DD extracts the dataset name (including the member
* name) from the JFCB.
*
         PRINT   GEN
DSN4DD   ID    R12
         PRINT NOGEN
         ENTRY VOL4DD
         ENTRY JFCB4DD
         USING EFPL,R1
         USING ENVBLOCK,R8
         USING EVALBLOCK,R11
         SPACE 2
         STM   R14,R12,12(R13)
         LR    R12,R15
         ST    R13,SAVEAREA+4
         LA    R15,SAVEAREA
         ST    R15,8(,R13)
         LR    R13,R15
         LR    R8,R0
         LM    R10,R11,EFPLARG     Address ARGTABLE
         L     R11,0(,R11)            & EVALBLOCK
         XC    EVALBLOCK_EVLEN,EVALBLOCK_EVLEN   Default to zero length
         B     MAINLINE
         SPACE 2
RTNXT    DS    0H
         L     R13,SAVEAREA+4
         XC    8(4,R13),8(R13)
         XC    16(4,R13),16(R13)   R15 (return code) always
         LM    R14,R12,12(R13)        get set to zero.
         BR    R14
         TITLE            '<< REXX - Obtain JFCB information for a DD  X
                              System Linkage for entry point VOL4DD >>'
         SPACE 3
* VOL4DD extract up to 5 volume serial numbers from the JFCB
*
* If the DDname is allocated to multiple volumes, VOL4DD returns the
* the list as a string using comma as the separator character.
         SPACE 3
VOL4DD   DS    0D
         DROP  R12
         USING VOL4DD,R15
         STM   R14,R12,12(R13)
         L     R12,VDSN4DD
         DROP  R15
         USING DSN4DD,R12
         ST    R13,SAVEAREA+4
         LA    R15,SAVEAREA
         ST    R15,8(,R13)
         LR    R13,R15
         LR    R8,R0
         LM    R10,R11,EFPLARG     Address ARGTABLE
         L     R11,0(,R11)            & EVALBLOCK
         XC    EVALBLOCK_EVLEN,EVALBLOCK_EVLEN   Default to zero length
         MVI   EVALBLOCK_EVLEN+L'EVALBLOCK_EVLEN-1,X'06'
         B     MAINLINE
         TITLE            '<< REXX - Obtain JFCB information for a DD  X
                             System Linkage for entry point JFCB4DD >>'
         SPACE 3
* JFCB4DD returns the address of the JFCB for the specified DDname.
         SPACE 3
JFCB4DD  DS    0D
         DROP  R12
         USING JFCB4DD,R15
         STM   R14,R12,12(R13)
         L     R12,VDSN4DD
         DROP  R15
         USING DSN4DD,R12
         ST    R13,SAVEAREA+4
         LA    R15,SAVEAREA
         ST    R15,8(,R13)
         LR    R13,R15
         LR    R8,R0
         LM    R10,R11,EFPLARG     Address ARGTABLE
         L     R11,0(,R11)            & EVALBLOCK
         XC    EVALBLOCK_EVLEN,EVALBLOCK_EVLEN   Default to zero length
         MVI   EVALBLOCK_EVLEN+L'EVALBLOCK_EVLEN-1,X'04'
         B     MAINLINE
         SPACE 2
VDSN4DD  DC    V(DSN4DD)
SAVEAREA DS    18F
         TITLE            '<< REXX - Obtain JFCB information for a DD  X
                                                Parse the Arguments >>'
MAINLINE DS    0H
         USING IRXEXTE,R9
         USING SHVBLOCK,R14
         L     R9,ENVBLOCK_IRXEXTE Address the REXX vector table.
         MVI   TRTABLE-1,X'FF'     Pre-set table value.
         MVI   DDNAME,C' '
         MVC   DDNAME+1(L'DDNAME-1),DDNAME
         BAL   R14,STRIP           Strip out arg(1).
         B     MISSING_DD          Arg(1) not specified.
         LA    R0,11               Maximum length.
         CR    R15,R0              Length(arg(1)) > maximum ?
         BNH   *+6                    -no -
         LR    R15,R0                 -yes-   Use maximum
         EX    R15,MVC_DD          Pick-up the DDname.
         SPACE 1
         LA    R3,0                Presume 'concat' = 0.
         MVI   TRTABLE-1,X'00'     Pre-set table value.
         MVC   TRTABLE,TRTABLE-1
         MVI   TRTABLE+X'4E',X'4E' Looking for a plus sign.
         TRT   DDNAME(9),TRTABLE
         BZ    QUALIFIED           Plus sign was not found.
         MVI   TRTABLE-1,X'FF'     Pre-set table value.
         MVC   TRTABLE,TRTABLE-1
         MVI   TRTABLE+C'0',X'00'
         MVC   TRTABLE+C'1'(9),TRTABLE+C'0'
         LR    R4,R1               Remember the plus sign's address.
         LA    R3,1(,R1)           Address of 1st numeric.
         TRT   0(4,R3),TRTABLE     Find the delimiter (i.e. blank)
         BZ    BAD_CONCAT          Too many digits.
         SR    R1,R3               Calculate number of digits and
         LA    R1,111(,R1)            hence the PACK instr len.
         BZ    BAD_CONCAT          When the length was zero.
         EX    R1,PACK1            Pick-up the qualifier
         CVB   R3,DBLWD               into a register.
         TITLE            '<< REXX - Obtain JFCB information for a DD  X
                                                      Scan the TIOT >>'
QUALIFIED0 DS  0H
         MVI   0(R4),C' '          Clean-up
         MVC   1(4,R4),0(R4)          the DDname.
QUALIFIED  DS  0H
         SR    R0,R0               Used later
         LR    R5,R0                  for IC/ICM instructions.
         USING PSA,R0
         USING TCB,R1
         L     R1,PSATOLD          Get TCB address.
         L     R1,TCBTIO           Get TIOT address.
         DROP  R1
         USING TIOT1,R1
         LA    R3,1(,R3)           Concat number relative to zero.
         LA    R4,0                Concat counter starts at zero.
FIND_DD  DS    0H
         CLC   TIOEDDNM,DDNAME     Is this the requester's DDname?
         BE    SAME_DD                -yes-
         CLI   TIOELNGH,X'00'      End of TIOT's?
         BE    WRONG_DD               -yes-
         IC    R0,TIOELNGH         Get TIOT length and
         AR    R1,R0                  point to next TIOT.
         B     FIND_DD             Loop back.
NEXT_CONCAT DS 0H
         LA    R4,1(,R4)           Count another concat level.
         IC    R0,TIOELNGH         Get TIOT length.
         LTR   R0,R0               Is there any length?
         BZ    COUNTED                -no -   Done counting.
         AR    R1,R0               Point to next TIOT.
         CLC   TIOEDDNM,=CL8'        '   Still same DDname?
         BNE   COUNTED                      -no -   Done counting.
SAME_DD  DS    0H
         BCT   R3,NEXT_CONCAT      Caller's concat number exhausted?
         ICM   R5,7,TIOEJFCB          -yes-   Get the JFCB TTR address.
         LA    R10,REQEPA          SWA parm list
         USING ZB505,R10              addressability
COUNT_CONCAT   DS    0H
         IC    R0,TIOELNGH         Get TIOT length.
         LTR   R0,R0               Is there any length?
         LA    R4,1(,R4)           Count another concat level.
         BZ    COUNTED                -no -   Done counting.
         AR    R1,R0               Point to next TIOT.
         CLC   TIOEDDNM,=CL8'        '   Still same DDname?
         BE    COUNT_CONCAT                 -yes-   Keep counting.
COUNTED  DS    0H
         LTR   R5,R5               Is there a JFCB address?
         BNZ   GET_JFCB               -yes-
         MVI   EVALBLOCK_EVLEN+L'EVALBLOCK_EVLEN-1,X'00'
         B     DSN_DONE
         TITLE            '<< REXX - Obtain JFCB information for a DD  X
                                               Set the REXX result. >>'
GET_JFCB DS    0H
         STCM  R5,7,SWVA           Give EPA the JFCB token.
         XC    SWQMPA,SWQMPA       Clear the QMPA address.
         PRINT GEN
        SWAREQ MF=(E,REQLIST),UNAUTH=YES    Call the SWA manager.
         PRINT NOGEN
         L     R5,SWPFXPTR         Get the resolved address for JFCB.
         DROP  R10
         LA    R5,16(,R5)
         CLI   EVALBLOCK_EVLEN+L'EVALBLOCK_EVLEN-1,X'04'
         BE    GIVE_JFCB
         USING INFMJFCB,R5
         CLI   EVALBLOCK_EVLEN+L'EVALBLOCK_EVLEN-1,X'06'
         BE    GET_VOLSER
         MVC   EVALBLOCK_EVDATA(44),JFCBDSNM   Get the DSN
         LA    R1,EVALBLOCK_EVDATA+44   In case of full name.
         XC    TRTABLE,TRTABLE     Clear the TRT table
         MVI   TRTABLE+C' ',C' '   Blank is the only delimiter.
         TRT   EVALBLOCK_EVDATA(44),TRTABLE   Find the blank.
         TM    JFCBTSDM,JFCPAT     DSCB patterning done?
         BO    NO_MEMBER             -yes-
         CLI   JFCBELNM,C' '       Is there a member name?
         BE    NO_MEMBER             -no -
         MVI   0(R1),C' '          In case
         MVC   1(10,R1),0(R1)         membername is 8 bytes long.
         MVI   0(R1),C'('          Wrap
         MVC   1(8,R1),JFCBELNM       the member name.
         LA    R2,1(,R1)           Start-of-scan address.
         TRT   0(9,R2),TRTABLE     Will always find a blank.
         MVI   0(R1),C')'          Complete the wrap.
         LA    R1,1(,R1)           Allow for right parenthesis.
NO_MEMBER  DS  0H
         LA    R2,EVALBLOCK_EVDATA Calculate
         SR    R1,R2                  the total length and
         ST    R1,EVALBLOCK_EVLEN        give it to REXX.
         B     DSN_DONE
GIVE_JFCB  DS  0H
         ST    R5,EVALBLOCK_EVDATA  Give the address.
         B     DSN_DONE
GET_VOLSER  DS  0H
         MVC   EVALBLOCK_EVDATA(6),JFCBVOLS  Pickup the first volser
         LA    R0,5                5 volsers is the maximum.
         SR    R1,R1               Pickup
         IC    R1,JFCBNVOL            the volume count.
         CR    R1,R0               More than the maximum?
         BNH   *+6                    -no -
         LR    R1,R0                  -yes- Use the maximum instead.
         BCT   R1,*+8              Only one volser?  -no -
         B     DSN_DONE                              -yes-
         LA    R2,EVALBLOCK_EVDATA+6  Next volser goes here.
         LA    R3,JFCBVOLS+6       Next volser comes from here.
         B     VOL_LOOP+8
VOL_LOOP DS    0H
         LA    R2,7(,R2)           Next 'to' address.
         LA    R3,6(,R3)           Next 'from' address.
         SPACE 1
         MVI   0(R2),C','          Comma is the separator of choice.
         MVC   1(6,R2),0(R3)       Pickup next volser.
         BCT   R1,VOL_LOOP         Count exhausted?  -no -
         SPACE 1
         LA    R0,EVALBLOCK_EVDATA-7
         SR    R2,R0
         ST    R2,EVALBLOCK_EVLEN
DSN_DONE DS    0H
         CVD   R4,DBLWD            Put concat count
         OI    DBLWD+7,X'0F'          into
         UNPK  UNPACKED,DBLWD+5(3)       EBCDIC format.
         LA    R2,4                Maximum loop count.
         LA    R3,*+4              Top-of-loop address.
         CLI   UNPACKED,C'0'       Significant digit yet?
         BNE   *+12                   -yes-
         MVC   UNPACKED(L'UNPACKED-1),UNPACKED+1
         BCTR  R2,R3               Keep looking (4 times.)
         LA    R2,1(,R2)           Number of significant digits so
         ST    R2,SHVVALL-SHVBLOCK+@SHV  tell EXCOM that.
         TITLE            '<< REXX - Obtain JFCB information for a DD  X
                                               Set REXX variable RC >>'
*
* Refer to the IRXEXCOM routine; pages 312-319 of SC28-1883-06 -
* TSO Extentions Version 2  REXX/MVS Reference
*
SET_RC   DS    0H
         LA    R0,ENVBLOCK         Make sure REXX knows environment.
         L     R15,IRXEXCOM        Get IRXEXCOM's address from vector.
         LA    R1,PLIST_EXCOM      Set the plist address.
         BALR  R14,R15             Now call IRXEXCOM.
         B     RTNXT               Go return to caller.
         SPACE 1
PLIST_EXCOM DC A(EXCOM_LIT,0,0)
         DC    A(@SHV+X'80000000')
         SPACE 1
@SHV     DC    2A(0)
         DC    C'S'
         DS    XL3'000000'
         DC    A(0,RC_LIT,L'RC_LIT,UNPACKED,0)
         SPACE 1
EXCOM_LIT DC   CL8'IRXEXCOM'
RC_LIT   DC    C'RC'
         SPACE 2
BAD_CONCAT     DS    0H
         LA    R3,256              A bogus concatenation counter
         B     QUALIFIED0             but revert to normal logic flow.
         SPACE 2
MISSING_DD     DS    0H
WRONG_DD       DS    0H            The requested DDNAME was not found.
         XC    EVALBLOCK_EVLEN,EVALBLOCK_EVLEN   Default to zero length
         MVC   UNPACKED(L'MINUS1),MINUS1
         LA    R0,L'MINUS1
         ST    R0,SHVVALL-SHVBLOCK+@SHV
         B     SET_RC
         TITLE            '<< REXX - Obtain JFCB information for a DD  X
                     Subroutine to Strip Leading && Trailing Blanks >>'
* Registers upon entry
*    R10 ==> argument table entry
*    R14 ==> exit address when agrument is null
*    R14+4=> normal exit
*
* Registers upon exit
*    R10 ==> next argument table entry.
*    R2    = 0 (zero)
*    R3  ==> leftmost non-blank byte of argument
*    R4  ==> rightmost non-blank byte of argument
*    R15   = R4 - R3 (length of argument minus 1)
         SPACE 2
HEXFF    DC    X'FFFFFFFFFFFFFFFF'
         DS    XL1
TRTABLE  DS    XL256
         SPACE 1
TRT3     TRT   0(0,R3),TRTABLE
         SPACE 2
         USING ARGTABLE_ENTRY,R10
STRIP    DS    0H
         CLC   HEXFF,ARGTABLE_ARGSTRING_PTR  Is there an argument?
         BER   R14                              -no -
         L     R15,ARGTABLE_ARGSTRING_LENGTH
         L     R3,ARGTABLE_ARGSTRING_PTR  Get address of argument.
         LA    R10,ARGTABLE_NEXT   Point to next argument table entry.
         SPACE 1
         LTR   R15,R15             Does the argument have any length?
         BZR   R14                    -NO - take abnormal exit.
         LA    R4,0(R15,R3)        Point just beyond ARG.
         MVC   TRTABLE,TRTABLE-1   Set to
         MVI   TRTABLE+C' ',X'00'     bypass blanks.
         BCTR  R15,0               Set length for TRT instruction.
         EX    R15,TRT3            Skip to non-blank.
         BZR   R14                 When all blank.
         LR    R3,R1               Re-set starting address.
STRIP@R  DS    0H
         BCTR  R4,0                Backpedal 1 byte.
         CLI   0(R4),X'40'         (still) at a blanK?
         BNE   STRIPPED               -no -
         CR    R4,R3                  -yes-  More to inspect?
         BH    STRIP@R                          -yes-
STRIPPED DS    0H
         LR    R15,R4              Calculate
         SR    R15,R3                 length of ARG - 1.
         SR    R2,R2               Pre-clear R2 for TRT
         XC    TRTABLE,TRTABLE     Clear translate table.
         BC    15,4(,R14)          Take normal exit.
         TITLE            '<< REXX - Obtain JFCB information for a DD  X
                                                   Error Conditions >>'
*
* Refer to the IRXSAY   routine; pages 336-339 of SC28-1883-06 -
* TSO Extentions Version 2  REXX/MVS Reference
*
SAY_LIT        DC    CL8'WRITE   '
SAY_BUFF       DS    A
SAY_LEN        DS    F
SAY_PLIST      DC    A(SAY_LIT,SAY_BUFF,SAY_LEN+X'80000000')
MISSING_MSG    DC    C'First argument (DDNAME) missing or invalid.'
         LA    R15,MISSING_MSG
         LA    R0,L'MISSING_MSG
         B     SAY_CALL
SAY_CALL DS    0H
         ST    R15,SAY_BUFF
         ST    R0,SAY_LEN
         LA    R1,SAY_PLIST
         LA    R0,ENVBLOCK
         L     R15,IRXSAY
         BALR  R14,R15
         L     R13,SAVEAREA+4
         XC    8(4,R13),8(R13)
         LM    R14,R12,12(R13)
         LA    R15,40
         BR    R14
*        ORG   SAY_LIT
         TITLE            '<< REXX - Obtain JFCB information for a DD  X
                                              Global Data Constants >>'
         SPACE 2
DBLWD    DS    D
         SPACE 1
         PRINT GEN
REQLIST SWAREQ FCODE=LA,EPA=REQPTR,MF=L
REQPTR   DC    A(REQEPA)
REQEPA   DC    9F'0'
         PRINT NOGEN
         SPACE 1
MVC_DD   MVC   DDNAME(0),0(R3)
PACK1    PACK  DBLWD(0),1(0,R4)
MINUS1   DC    CL2'-1'
DDNAME   DS    CL13' '
UNPACKED DS    CL5
         SPACE 2
         LTORG
         TITLE            '<< REXX - Obtain JFCB information for a DD  X
                                                 DSECTs and EQUates >>'
         YREGS
         SPACE 2
       IRXENVB
         SPACE 2
       IRXEXTE
         SPACE 2
       IRXSHVB
         SPACE 2
       IRXEFPL
         SPACE 2
      IRXARGTB
         SPACE 2
      IRXEVALB
         SPACE 2
        IHAPSA
         SPACE 2
        IKJTCB
         SPACE 2
      IEFTIOT1
         SPACE 2
      IEFJFCBN
         SPACE 2
         PRINT GEN
      IEFZB505 LOCEPAX=YES
         CVT   DSECT=YES
      IEFJESCT
         END   DSN4DD
