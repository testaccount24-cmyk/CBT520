./ ADD NAME=$README$ 0101-01157-01235-1310-00019-00046-00000-PST0705
Installation / readme for SCC@DSN

There are 3 component for this package

MACRO    Is the Assembler macro named ID required to assemble the
         assembler routine. Put it into a library included in your
         SYSLIB concatenation for the assembly.

SOURCE   Is the single Assembler source deck of the function.

HELP     Is the documentation on how to use SCC@DSN in Rexx programs.

Making SCC@DSN available to your rexx program can be as simple as
link editing it to a load library that is within the JOBLIB/STEPLIB
concatenation when the rexx program runs. Myself, I have built a Rexx
function package under the name IRXFLOC which contains all the
assembler written rexx functions for the platform.

The HELP documentation should provide all the usage notes required.
./ ADD NAME=HELP     0105-96073-96204-1023-00077-00063-00000-PST0705
 Name:        SCC@DSN

 Purpose:     Determine if a specified dataset exits.

 Environment: REXX subroutine/function for all MVS/ESA environments.
              SCC@DSN resides in the IRXFLOC "function package".

 Features:    SCC@DSN extracts the catalog entry to determine the
              volume serial number. It then ensures that the dataset
              exists on that volume.

              Datasets belonging to a GenerationDataGroup are supported at
              the relative generation level.  SCC@DSN will optionally
              translate a relative level of a GDG to its absolute value.

              Uncatalogued datasets can be verified.

              A dataset which is catalogued to tape is partially
              supported. SCC@DSN does not check that the dataset
              exists on the volume.

 Arguments:   1. The dataset name as per JCL.

                 For a GenerationDataGroup, the dataset name is
                 qualified as per JCL. i.e. STP.XX00.GDG(0)

              2. (optional; use for uncatalogued datasets)
                 The volume serial number.

                 When the second argument is specified, SCC@DSN avoids
                 checking the system catalog via the LOCATE macro.

              3. (optional) variable name to which the value of the
                 volume serial number will be assigned.

              4. (optional) variable name to which the value of the
                 absolute dataset name (of a relative
                 GenerationDataGroup) will be assigned.

 Results:     0 = dataset does not exist or dataset is migrated.

              1 = dataset does exist.

              (when 3rd argument is used.) The variable is assigned
              the value of the series volume serial numbers. If the
              dataset is catalogued to multiple volumes, the series
              entries are separated by commas.

 Notes:
   MIGRATED datasets.
      Migrated datasets are supported but as per the 'tape dataset'
      feature. If the 3rd argument is coded, the value returned in
      that variable will be MIGRAT regardless of the level of
      migration.  If the dataset is migrated to tape, it will be
      considerd to exist (because SCC@DSN does not verify tape
      datasets). If the dataset is migrated to dasd, it will be
      considered to not exist.

         dsn = 'STTEST.WHATEVER'
         exist? = scc@dsn(dsn,,'VOL_SER')
         if vol_ser = 'MIGRAT' then
              say dsn 'is migrated to' word('dasd tape',exist?+1)


   If the 3rd arguement is used, ensure the variable name is enclosed
   within quotation marks so that REXX does not assign the variable's
   (pre-set) value before passing it to the function/subroutine.

   SCC@DSN was developed for a specfic jobstream where, under
   (abnormal) situations, no levels of a generation data group would
   be available to a jobstep which archives and deletes all the
   levels of the generation data group.

   SCC@DSN can be used effectively in a batch environment via the
   RC@FUNC exec to support conditional JCL.  (Note that as a
   function SCC@DSN does not set a return code but because RC@FUNC
   is an exec it does set the return code.) See example 2 below.

   If SCC@DSN is utilized to verify that a catalog entry for a disk
   dataset actually exists on the speified volume, then the second
   argument should be used to avoid re-checking the system catalog.

   Although in most situations the functionality of SCC@DSN is the
   same as SYSDSN, the following distinctions should be noted.
      SCC@DSN is independent of the host environment; SYSDSN is
      available only under address TSO.

      The dataset name for SCC@DSN is as per JCL. The dataset name
      for SYSDSN is as per TSO convention. i.e. unquoted dsn's have
      the PROFILE PREFIX applied; fully qualified dsn's must be
      enclosed within (single) quotation marks.

      SCC@DSN does not support/validate member names within a
      partiioned dataset; SYSDSN does.

      SCC@DSN validates relative generation data groups; SYSDSN
      validates generation data groups only as an absolute dataset
      name.

      SCC@DSN sets only a logical value (0 or 1) without
      'explanation' of when the dataset is not found; SYSDSN sets a
      text value which attempts to explain why the dataset was not
      found.

      SCC@DSN will validate a dataset name regardless of the system
      catalog via the second (volser) argument; SYSDSN will only
      validate a catalogued dataset name.

      SCC@DSN determines the migration level of a dataset; SYSDSN will
      cause a migrated dataset to be recalled.

 Examples:
   1. Allocate to a dataset if it exists
          if scc@dsn(userid()'.CLIST') then
               call sccalloc 'CLISTDD', userid()'.CLIST'

   2. Batch JCL to execute a step if a dataset exists
          //SETCC  EXEC  PGM=IRXJCL,
          //             PARM='RC@FUNC SCC@DSN("STP.XX00.D2")
          //    INCLUDE  MEMBER=SYSEXEC
          //         IF  (SETCC.RUN & SETCC.RC = 1) THEN
          //RUN    EXEC  PGM=STXX000
          //HISTORY  DD  DISP=SHR,DSN=STP.XX00.D2
          //RPT001OT DD  SYSOUT=(,)
          //       ENDIF






./ ADD NAME=MACRO    0102-98050-98050-1606-00049-00046-00000-PST0705
         MACRO
&LABEL   ID    &USING,&CSECT=YES,&AMODE=31,&RMODE=ANY
         LCLC  &U,&LBL
.*
.* Stelco macro used to:
.*    - generate the CSECT statement.
.*    - generate the USING, AMODE and RMODE statements for the CSECT.
.*    - generate an eye-catcher and date/time stamp (28 bytes total).
.*      (The values for date and time are the time of the Assembly.)
.*
.* The default for the USING statement is (register) 15.
.* Other defaults are as per the prototype above.
.*
.* If the CSECT requires multiple base registers, their specification
.* must be enclosed in parenthesis.       e.g.  BIGRTN   ID     (12,11)
.*
.* This macro can also be used to generate only the eye-catcher and
.* date/time stamp. For this type of usage specify   ID    ,CSECT=NO
.*
.* -----------------------Modification History-------------------------
.* 98-02-19 change from &SYSDATE to &SYSDATC
.*
&U       SETC  '15'
&LBL     SETC  ' '
         AIF   (K'&LABEL EQ 0).LBLSET
&LBL     SETC  '&LABEL'
.LBLSET  ANOP
         AIF   (T'&USING EQ 'O').USET
         AIF   ('&USING'(1,1) NE '(').ONEUSE
&U       SETC  '&USING'(2,K'&USING-2)
         AGO   .USET
.ONEUSE  ANOP
&U       SETC  '&USING'
.USET    ANOP
         AIF   ('&CSECT' EQ 'YES').CSECT
&LBL     DS    0H
         B     *+32
         AGO   .STAMP
.CSECT   ANOP
&LBL     CSECT
&LBL     AMODE &AMODE
&LBL     RMODE &RMODE
         USING &LABEL,&U
         BC    15,32(,15)
.STAMP   ANOP
         DS    CL4
         DC    CL8'&LBL'
         DC    CL16'&SYSDATC &SYSTIME'
         MEND
./ ADD NAME=SOURCE   0140-95181-01235-1315-00824-00355-00000-PST0705
@DSN     TITLE            '<< REXX - Determine a datasets existence    X
                                                      Documentation >>'
* Name:        SCC@DSN
*
* Purpose:     Determine if a specified dataset exits.
*
* Environment: REXX subroutine/function for Address TSO or MVS
*
* Features:    SCC@DSN extracts the catalogue entry to determine the
*              volume serial number. It then ensures that the dataset
*              exists on that volume.
*
*              Datasets belonging to a GenerationDataGroup are
*              supported at the relative generation level.
*
*              Uncatalogued datasets can be verified.
*
*              A dataset which is catalogued to tape is partially
*              supported. SCC@DSN does not check that the dataset
*              exists on the volume.
*
* Arguments:   1. The dataset name as per JCL.
*
*                 For a GenerationDataGroup, the dataset name is
*                 qualified as per JCL. i.e. STP.XX00.GDG(0)
*
*              2. (optional; use for uncatalogued datasets)
*                 The volume serial number.
*
*              3. (optional) A variable name which will be assigned
*                 the value of the volume serial number.
*
*              4. (optional) A variable name which will be assigned the
*                 value of the absolute dataset name (for a relative
*                 GenerationDataGroup).
*
* Results:     If the dataset exists, the result is 1 (one).
*
*              If the dataset does not exist, the result is 0 (zero).
*
*              If a (list of) volume serial number(s) was requested
*              via argument three, entries in the list are separated
*              by commas.
         TITLE            '<< REXX - Determine a datasets existence    X
                                                                    >>'
         PRINT   GEN
SCC@DSN  ID    R12
         SPACE 2
         STM   R14,R12,12(R13)
         LR    R12,R15
         ST    R13,SAVEAREA+4
         LA    R15,SAVEAREA
         ST    R15,8(,R13)
         LR    R13,R15
         XC    RC,RC
         B     MAINLINE
         SPACE 3
RC       DS    0F
         DS    AL1
RC1      DS    AL1
RC2      DS    AL1
RC3      DS    AL1
         SPACE 1
SAVEAREA DS    18F
         SPACE 1
RTNXT    DS    0H
         L     R15,RC
         L     R13,SAVEAREA+4
         XC    8(4,R13),8(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14
         TITLE            '<< REXX - Determine a datasets existence    X
                                                             Do it. >>'
MAINLINE DS    0H
         USING EFPL,R1
         USING ENVBLOCK,R8
         LR    R8,R0               Address the environment block.
         USING ARGTABLE_ENTRY,R10
         USING EVALBLOCK,R11
         USING IRXEXTE,R9
         USING SHVBLOCK,R7
         LM    R10,R11,EFPLARG     Address ARGTABLE & EVALBLOCK
         L     R11,0(,R11)
         L     R9,ENVBLOCK_IRXEXTE Address the REXX vector table.
         DROP  R1
         MVI   EVALBLOCK_EVDATA,C'1'  Presume dataset will be found.
         LA    R14,1               Set
         ST    R14,EVALBLOCK_EVLEN   length.
         MVI   TRTABLE-1,X'FF'
         MVI   DSN,C' '
         MVC   DSN+1(L'DSN+L'VOLSER-1),DSN
         XC    DEV_CODE,DEV_CODE
         BAL   R14,STRIP           Parse ARG(1).
         B     MISSING_DSN            - there was no ARG(1) -
         EX    R15,MVC_DSN         Get dataset name.
         BAL   R14,STRIP           Parse ARG(2).
         B     DO_LOCATE              - there was no ARG(2) -
         EX    R15,MVC_VOLSER      Get volume serial number.
         B     ISSUE_OBTAIN
         SPACE 3
DO_OBTAIN DS   0H
         TM    DEV_CODE+2,X'20'    Is the device class 'dasd'?
         BZ    RTNXT                  -no -
ISSUE_OBTAIN   DS    0H
        OBTAIN OBTAIN              Verify DSCB
         LTR   R15,R15             Good?
         BZ    RTNXT                  -yes-
         SPACE 1
FALSE    DS    0H
         MVI   EVALBLOCK_EVDATA,C'0'  -no -   revert to 'false'
         B     RTNXT                             and exit
         SPACE 3
DO_LOCATE LOCATE LOCATE            Verify catalog entry
         LTR   R15,R15             Good?
         BNZ   FALSE                  -no -
         MVC   VOLSER,WA_VOLSER    Extract the volser from catalog.
         BAL   R14,STRIP           Variable name for volser?
         B     IF_ARG4                -no -
         ST    R3,SHVNAMA-SHVBLOCK+@SHV
         LA    R15,1(,R15)
         ST    R15,SHVNAML-SHVBLOCK+@SHV
         LH    R15,VOLUMES
         LA    R2,WA_VOLSER
         ST    R2,SHVVALA-SHVBLOCK+@SHV
         LA    R14,12(,R2)
         LA    R1,6
LOOP     DS    0H
         BCT   R15,*+8
         B     CALL_EXCOM
         MVI   6(R2),C','
         MVC   7(6,R2),0(R14)
         LA    R1,7(,R1)
         LA    R2,7(,R2)
         LA    R14,12(,R14)
         B     LOOP
         SPACE 1
MVC_DSN  MVC   DSN(0),0(R3)
MVC_VOLSER     MVC   VOLSER(0),0(R3)
         TITLE            '<< REXX - Determine a datasets existence    X
                                     Assign the logical value to RC >>'
*
* Refer to the IRXEXCOM routine; pages 312-319 of SC28-1883-06 -
* TSO Extentions Version 2  REXX/MVS Reference
*
CALL_EXCOM  DS  0H
         ST    R1,SHVVALL-SHVBLOCK+@SHV
         L     R15,IRXEXCOM        Get routine's address from vector.
         LA    R0,ENVBLOCK         Make sure REXX knows environment.
         LA    R1,PLIST_EXCOM
         BALR  R14,R15
IF_ARG4  DS    0H
         BAL   R14,STRIP           Variable name for dsn?
         B     DO_OBTAIN              -no -
         ST    R3,SHVNAMA-SHVBLOCK+@SHV
         LA    R15,1(,R15)         Get length of varaiable name
         ST    R15,SHVNAML-SHVBLOCK+@SHV  into SHVBLOCK
         MVI   TRTABLE-1,X'00'     Every
         MVC   TRTABLE,TRTABLE-1      character
         MVI   TRTABLE+X'40',X'40'        except blank is valid.
         LA    R1,DSN+44           Pre-set delimiting address.
         TRT   DSN,TRTABLE         Find a blank.
         LA    R0,DSN              Address of variable's address
         ST    R0,SHVVALA-SHVBLOCK+@SHV  into the SHVBLOCK.
         SR    R1,R0               Calculate length of value.
         ST    R1,SHVVALL-SHVBLOCK+@SHV
         L     R15,IRXEXCOM        Get routine's address from vector.
         LA    R0,ENVBLOCK         Make sure REXX knows environment.
         LA    R1,PLIST_EXCOM
         BALR  R14,R15
         B     DO_OBTAIN
         SPACE 1
PLIST_EXCOM DC A(EXCOM_LIT,0,0)
         DC    A(@SHV+X'80000000')
         SPACE 1
@SHV     DS    0A
         DC    2A(0)
         DC    C'S'
         DS    XL3'000000'
         DC    3A(0)
         DC    A(WA_VOLSER,6)
         SPACE 1
EXCOM_LIT DC   CL8'IRXEXCOM'
RC_LIT   DC    C'RC'
         TITLE            '<< REXX - Determine a datasets existence    X
                     Subroutine to Strip Leading && Trailing Blanks >>'
* Registers upon entry
*    R10 ==> argument table entry
*    R14 ==> exit address when agrument is null
*    R14+4=> normal exit
*
* Registers upon exit
*    R10 ==> next argument table entry.
*    R2    = 0 (zero)
*    R3  ==> leftmost non-blank byte of argument
*    R4  ==> rightmost non-blank byte of argument
*    R15   = R4 - R3 (length of argument minus 1)
         SPACE 2
HEXFF    DC    X'FFFFFFFFFFFFFFFF'
         DS    XL1
TRTABLE  DS    XL256
         SPACE 1
TRT3     TRT   0(0,R3),TRTABLE
         SPACE 2
         USING ARGTABLE_ENTRY,R10
STRIP    DS    0H
         CLC   HEXFF,ARGTABLE_ARGSTRING_PTR  Is there an argument?
         BER   R14                              -no -
         L     R15,ARGTABLE_ARGSTRING_LENGTH
         L     R3,ARGTABLE_ARGSTRING_PTR  Get address of argument.
         LA    R10,ARGTABLE_NEXT   Point to next argument table entry.
         SPACE 1
         LTR   R15,R15             Does the argument have any length?
         BZR   R14                    -NO - take abnormal exit.
         LA    R4,0(R15,R3)        Point just beyond ARG.
         MVC   TRTABLE,TRTABLE-1   Set to
         MVI   TRTABLE+C' ',X'00'     bypass blanks.
         BCTR  R15,0               Set length for TRT instruction.
         EX    R15,TRT3            Skip to non-blank.
         BZR   R14                 When all blank.
         LR    R3,R1               Re-set starting address.
STRIP@R  DS    0H
         BCTR  R4,0                Backpedal 1 byte.
         CLI   0(R4),X'40'         (still) at a blanK?
         BNE   STRIPPED               -no -
         CR    R4,R3                  -yes-  More to inspect?
         BH    STRIP@R                          -yes-
STRIPPED DS    0H
         LR    R15,R4              Calculate
         SR    R15,R3                 length of ARG - 1.
         SR    R2,R2               Pre-clear R2 for TRT
         XC    TRTABLE,TRTABLE     Clear translate table.
         BC    15,4(,R14)          Take normal exit.
         TITLE            '<< REXX - Determine a datasets existence    X
                                                   Error Conditions >>'
*
* Refer to the IRXSAY   routine; pages 336-339 of SC28-1883-06 -
* TSO Extentions Version 2  REXX/MVS Reference
*
SAY_LIT        DC    CL8'WRITE   '
SAY_BUFF       DS    A
SAY_LEN        DS    F
SAY_PLIST      DC    A(SAY_LIT,SAY_BUFF,SAY_LEN+X'80000000')
MISSING_DSN_MSG DC    C'Argument (Datasetname) missing.'
MISSING_DSN    DS    0H
         LA    R15,MISSING_DSN_MSG
         LA    R0,L'MISSING_DSN_MSG
         B     SAY_CALL
SAY_CALL DS    0H
         ST    R15,SAY_BUFF
         ST    R0,SAY_LEN
         LA    R1,SAY_PLIST
         LA    R0,ENVBLOCK
         L     R15,IRXSAY
         BALR  R14,R15
         L     R13,SAVEAREA+4
         XC    8(4,R13),8(R13)
         LM    R14,R12,12(R13)
         LA    R15,40
         BR    R14
         TITLE            '<< REXX - Determine a datasets existence    X
                                           Data areas and constants >>'
         PRINT   GEN
OBTAIN  CAMLST SEARCH,DSN,VOLSER,WORKAREA
         SPACE 1
LOCATE  CAMLST NAME,DSN,,WORKAREA
         PRINT NOGEN
         SPACE 3
         SPACE 3
         SPACE 3
DSN      DS    CL44
VOLSER   DS    CL6
         DS    0D
WORKAREA DS    0CL265
VOLUMES  DS     H
DEV_CODE DS    XL4
WA_VOLSER DS   CL6
         DS    CL(265-12)
         LTORG
         TITLE            '<< REXX - Determine a datasets existence    X
                                                 DSECTs and EQUates >>'
         YREGS
         SPACE 2
       IRXENVB
         SPACE 2
       IRXEXTE
         SPACE 2
       IRXEFPL
         SPACE 2
      IRXARGTB
         SPACE 2
      IRXEVALB
         SPACE 2
       IRXSHVB
         END   SCC@DSN
