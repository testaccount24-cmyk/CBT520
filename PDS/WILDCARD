./ ADD NAME=$README  0100-01157-01157-1511-00026-00026-00000-PST0705
Installation / readme for WILDCARD

There are 4 component for this package

ID.MAC  Is an Assembler macro required to assemble each of the assembler
        routines. Put it into a library included in your SYSLIB
        concatenation for the assemblies.

SCCWC001.ASM  Is an assembler subroutine required for WILDCARD. Assemble
        it into an object or call library so that it can be link edited
        into WILDCARD.  Note that this subroutine could be CALLed by any
        program wishing to get an answer to 'does this generic entry
        match this static entry?'

WILDCARD.ASM  Is an assembler routine which runs as a Rexx function to
        set a logical value answering the question  'does this generic
        entry match this static entry?'

WILDCARD.HLP  Is the documentation on how a REXX program can use the
        function

Making WILDCARD available to your rexx program can be as simple as link
editing it to a load library that is within the JOBLIB/STEPLIB
concatenation when the rexx program runs. Myself, I have built a Rexx
function package under the name IRXFLOC which contains all the assembler
written rexx functions for the platform.
./ ADD NAME=HELP     0100-01157-01157-1511-00053-00053-00000-PST0705
 Name:        WILDCARD

 Purpose:     Set a logical value as to whether or not the first
              argument is 'matched' to the second argument.

 Environment: REXX subroutine/function for all MVS/ESA environments.
              WILDCARD resides in the IRXFLOC "function package".

 Arguments:
           1. The selection criterea. The criterea is composed of a
              combination of natural characters and two 'wildcard'
              values. The natural characters must be matched (within
              positional context) to the second argument value.

              The 'wildcard' values and there action are:
                 '*' (asterisk) will 'match' to any value of any
                     length (including zero) in the 'target'.
                 '%' (percent sign) will 'match' any value in the
                     'target' but the corresponding 'target' position
                     must be occupied i.e not null

              'Wildcard' values can be specified multiple times.


           2. The 'target' field. This argument contains the value
              the selection criterea will attempt to match.


 Results:    1 means the 'target' is matched.

             0 means the 'target' is not matched.


 Examples:
             wildcard('PST*','PST0705') --> 1

             wildcard('*705','PST0705') --> 1

             wildcard('*07*','PST0705') --> 1

             wildcard('*0%0*','PST0705') --> 1

             wildcard('PST0705%','PST0705') --> 0

             wildcard('PST%','PST0705') --> 0

             if wildcard('ANYMEM*',mem) then
               do
                  call sccpdsr('PDS1',mem,'MEM.')
                  do i = 1 to mem.0
                       if find(mem.i,'COPY') then call read_copy
                  end
               end
./ ADD NAME=ID       0100-01157-01157-1459-00049-00049-00000-PST0705
         MACRO
&LABEL   ID    &USING,&CSECT=YES,&AMODE=31,&RMODE=ANY
         LCLC  &U,&LBL
.*
.* Stelco macro used to:
.*    - generate the CSECT statement.
.*    - generate the USING, AMODE and RMODE statements for the CSECT.
.*    - generate an eye-catcher and date/time stamp (28 bytes total).
.*      (The values for date and time are the time of the Assembly.)
.*
.* The default for the USING statement is (register) 15.
.* Other defaults are as per the prototype above.
.*
.* If the CSECT requires multiple base registers, their specification
.* must be enclosed in parenthesis.       e.g.  BIGRTN   ID     (12,11)
.*
.* This macro can also be used to generate only the eye-catcher and
.* date/time stamp. For this type of usage specify   ID    ,CSECT=NO
.*
.* -----------------------Modification History-------------------------
.* 98-02-19 change from &SYSDATE to &SYSDATC
.*
&U       SETC  '15'
&LBL     SETC  ' '
         AIF   (K'&LABEL EQ 0).LBLSET
&LBL     SETC  '&LABEL'
.LBLSET  ANOP
         AIF   (T'&USING EQ 'O').USET
         AIF   ('&USING'(1,1) NE '(').ONEUSE
&U       SETC  '&USING'(2,K'&USING-2)
         AGO   .USET
.ONEUSE  ANOP
&U       SETC  '&USING'
.USET    ANOP
         AIF   ('&CSECT' EQ 'YES').CSECT
&LBL     DS    0H
         B     *+32
         AGO   .STAMP
.CSECT   ANOP
&LBL     CSECT
&LBL     AMODE &AMODE
&LBL     RMODE &RMODE
         USING &LABEL,&U
         BC    15,32(,15)
.STAMP   ANOP
         DS    CL4
         DC    CL8'&LBL'
         DC    CL16'&SYSDATC &SYSTIME'
         MEND
./ ADD NAME=SCCWC001 0100-01157-01157-1515-00139-00139-00000-PST0705
* ** ** ** ** ** ** ** ** ** ** ** * ** ** ** ** ** ** ** ** ** ** ** *
*
* Program name :  SCCWC001
*
* Function:       Determine if the selection parameter (which may
*                 contain 'wildcard' specifications of * and %) is
*                 matched to the target parameter.
*
*                 A wildcard value of percent sign (or x'FF') means
*                 the corresponding column in the target must exist.
*                 A wildcard value of asterisk will match to any
*                 string of any length (including 0) in the target.
*
*                 Multiple wildcard specifications are valid.
*
* Parameters:  1. The 'selection' field. A string of characters which
*                 may contain 'wildcard' values as described above.
*                 All non-wildcard values are compared for an exact
*                 match against the target parameter.
*
*              2. Fullword field whose hexadecimal value is the
*                 length of parameter 1.
*
*              3. The 'target' field. This (sub)field is what the
*                 'selection' parameter is attempting to match.
*
*              4. Fullword field whose hexadecimal value is the
*                 length of parameter 3.
*
* Output:      SCCWC001 produces no output parameter. It sets the
*              condition code to zero if a match is made and sets the
*              condition code to other than zero if no match is made.
*              (No meaning other than 'not equal' should be derived
*              from condition code settings of 1 or 2; condition code
*              3 should never be set.)
*
* Updates:
*     Jun. 1995    - R. Ryerse. Original composition.
*
* ** ** ** ** ** ** ** ** ** ** ** * ** ** ** ** ** ** ** ** ** ** ** *
SCCWC001 ID    R12
         STM   R14,R12,12(R13)
         LR    R12,R15
         B     START
FORCE_EQUAL DS 0H
         SR    R0,R0
         B     RTNXT
FORCE_LOW  DS  0H
         CLI   SCCWC001,X'FF'
         B     RTNXT
FORCE_HIGH  DS 0H
         CLI   SCCWC001,X'00'
RTNXT    DS    0H
         LA    R0,0                  Need a convenient zero to
         ST    R0,16(,R13)              set R15 to zero.
         LM    R14,R12,12(R13)       Re-set callers registers.
         BR    R14                   Return to caller.
         SPACE 3
START    DS    0H
         XC    A_STAR,A_STAR         We have no asterisk (yet).
         LM    R3,R6,0(R1)           Pick-up parameter addresses.
         L     SELECT_COUNT,0(,R4)   Get length(select).
         L     TARGET_COUNT,0(,R6)   Get length(target).
         LA    R1,0(TARGET_COUNT,TARGET)
         LA    R7,*+4
         BCTR  R1,0
         CLI   0(R1),C' '
         BNE   *+6
         BCTR  TARGET_COUNT,R7
         LA    R7,LOOP
LOOP     DS    0H            The major loop.
         CLI   0(SELECT),C'*'        Match everything?
         BNE   NOT_ASTERISK             -no -
         LA    R7,LOOP@                 -yes-   Switch to minor loop
         B     COUNT_SELECT                        and continue.
NOT_ASTERISK   DS    0H
         CLI   0(SELECT),C'%'        Match any character?
         BE    COUNT_TARGET             -yes-
         CLC   0(1,SELECT),0(TARGET) Matched?
         BNE   RE_LOOP                  -no - double check needed.
COUNT_TARGET   DS    0H
         LA    TARGET,1(,TARGET)     Step along to next 'target' byte.
         BCT   TARGET_COUNT,COUNT_SELECT  Count and continue.
         B     END_OF_TARGET         'Target' is exhausted.
COUNT_SELECT   DS    0H
         LA    SELECT,1(,SELECT)     Step along to next 'select' byte.
         BCTR  SELECT_COUNT,R7       Count the select and loop.
         SPACE 2
* The 'select' field is exhausted but 'target' is not.
         LA    R0,LOOP@              Was last 'select' byte
         CR    R0,R7                    an asterisk?
         BE    RTNXT                       -yes-   We have a match
RE_LOOP  DS    0H
         LM    SELECT,TARGET_COUNT,A_STAR
         LTR   SELECT,SELECT         Was there a previous asterisk?
         BZ    FORCE_LOW                -no -
         LA    TARGET,1(,TARGET)     Post asterisk matched plus one
         BCT   TARGET_COUNT,LOOP@@      and length minus one.
         B     FORCE_LOW             Target went exhausted.
END_OF_TARGET  DS    0H
         LA    SELECT,1(,SELECT)     Step along to next 'select' byte.
         BCT   SELECT_COUNT,*+8      Count 'select'.
         B     FORCE_EQUAL           'Select' equally exhausted.
         CLI   0(SELECT),C'*'        Afterthought '*'
         BE    END_OF_TARGET            -yes-   Keep checking.
         B     FORCE_HIGH               -no -   No match.
         EJECT
LOOP@    DS    0H            After '*' in select.
         CLI   0(SELECT),C'*'        Another asterisk?
         BE    COUNT_SELECT@            -yes-   Really has no meaning.
         CLI   0(SELECT),C'%'        Looking for any character?
         BNE   LOOP@@                   -no -
         LA    TARGET,1(,TARGET)     Step along to next 'target' byte.
         BCT   TARGET_COUNT,COUNT_SELECT@ Decrement 'target' count.
         B     END_OF_TARGET@        'Target' is exhausted.
COUNT_SELECT@  DS    0H
         LA    SELECT,1(,SELECT)     Step along to next 'select' byte.
         BCTR  SELECT_COUNT,R7       Count the select and loop.
         B     FORCE_EQUAL           'Select' is exhausted.
END_OF_TARGET@ DS    0H
         BCT   SELECT_COUNT,FORCE_LOW Count 'select'. No match if more.
         B     FORCE_EQUAL           'Select' equally exhausted.
LOOP@@   DS    0H
         LA    R7,LOOP               Revert to major loop.
         STM   SELECT,TARGET_COUNT,A_STAR
         CLC   0(1,SELECT),0(TARGET) Matched?
         BE    COUNT_TARGET             -yes-   Jump into major loop.
         LA    TARGET,1(,TARGET)     Step along to next 'target' byte.
         BCT   TARGET_COUNT,LOOP@@+4 Decrement 'target' count. Loop.
         B     RTNXT                 LOOP@@+8 has set condition code.
         SPACE 3
         DS    0D
A_STAR   DS    XL16
         YREGS
SELECT         EQU   R3
SELECT_COUNT   EQU   R4
TARGET         EQU   R5
TARGET_COUNT   EQU   R6
         END   SCCWC001
./ ADD NAME=WC       0100-01157-01157-1511-00043-00043-00000-PST0705
/* REXX subroutine/function which determines if a selection operand
   which may contain "wildcard" values is matched to a second operand.
   The valid "wildcard" values are:
   % - The corresponding position of the 2nd operand must be filled.
      * - Any string (including null) of any length from the 2nd
          operand is a 'match'.                                       */
parse arg select, target
prefix = 0
do while pos('*',select,) > 0
     parse var select sub_select '*' select
     if sub_select = '' then
       do
          if select = '' then return 1
          prefix = 1
          ? = left(select,1)
          select
               when ? = '*' then nop
               when ? = '%' then
                 do
                    ?? = compare(select,copies('%',length(select)))
                    ? = pos(substr(select,??,1),target)
                    if ? = 0 then return 0
                    target = substr(target,?-??+1)
                 end
               otherwise parse var target (?)-0 target
          end
       end
     else
       do
          sub_select = merge@pc(sub_select,target)
          if \prefix & sub_select \== left(target,length(sub_select)) then retur
          if  prefix & pos(sub_select,target) = 0 then return 0
          parse var target (sub_select) target
       end
end
if select \= '' then
  do
     if arg(2) \== target then prefix = 1
     if prefix then target = right(target,length(select))
     if merge@pc(select,target) \== target then return 0
  end
return 1

./ ADD NAME=WILDCARD 0100-01157-01157-1511-00192-00192-00000-PST0705
* ** ** ** ** ** ** ** ** ** ** ** * ** ** ** ** ** ** ** ** ** ** ** *
*
* Program name :  WILDCARD
*
* Environment:    REXX Function/Subroutine
*
* Function:       Set logical value (0 or 1) which answers the question
*                 'does arg(1) match arg(2)?' wherein arg(1) can
*                 include (multiple occurrances of) * (asterisk) and/or
*                 % (percent sign).
*
* Parameters:  1. The 'select' mask. A string of characters which may
*                 contain the wildcard values.
*
*              2. The 'target' field which is to be matched.
*                 length of parameter 1.
*
* Output          0   (the select field was not matched)
*                 1   (the select field was matched)
*
* Notes:          WILDCARD is the REXX function/subroutine shell. The
*                 actual 'matching' is done via the assembler
*                 subroutine SCCWC001.
*
* Updates:
*     Jun. 1995    - R. Ryerse. Original composition.
*
* ** ** ** ** ** ** ** ** ** ** ** * ** ** ** ** ** ** ** ** ** ** ** *
WILDCARD ID    R12
         SPACE 2
         STM   R14,R12,12(R13)
         LR    R12,R15
         ST    R13,SAVEAREA+4
         LA    R15,SAVEAREA
         ST    R15,8(,R13)
         LR    R13,R15
         XC    RC,RC
         B     MAINLINE
         SPACE 3
RC       DS    0F
         DS    AL1
RC1      DS    AL1
RC2      DS    AL1
RC3      DS    AL1
         SPACE 1
SAVEAREA DS    18F
         SPACE 3
RTNXT    DS    0H
         L     R13,SAVEAREA+4
         XC    8(4,R13),8(R13)
         XC    16(4,R13),16(R13)   R15 (return code) always
         LM    R14,R12,12(R13)        get set to zero.
         BR    R14
         TITLE            '<<                                          X
                                                Parse the Arguments >>'
MAINLINE DS    0H
         USING EFPL,R1
         USING ENVBLOCK,R8
         USING IRXEXTE,R9
         USING ARGTABLE_ENTRY,R10
         USING EVALBLOCK,R11
         LR    R8,R0               Address the environment block.
         L     R9,ENVBLOCK_IRXEXTE Address the REXX vector table.
         LM    R10,R11,EFPLARG     Address ARGTABLE & EVALBLOCK.
         L     R11,0(,R11)
         MVI   TRTABLE-1,X'FF'     Pre-set table value.
         BAL   R14,STRIP           Strip out arg(1).
         B     MISSING_MASK        Arg(1) not specified.
         ST    R3,PLIST            Need argument address
         LA    R15,1(,R15)            and
         ST    R15,LENGTH1               length.
         SPACE 1
         BAL   R14,STRIP           Strip out arg(2).
         B     MISSING_TARGET      Arg(2) not specified
         ST    R3,PLIST+8          Need argument address
         LA    R15,1(,R15)            and
         ST    R15,LENGTH2               length.
         MVI   EVALBLOCK_EVDATA,C'1'  Presume 'matched' for result.
         LA    R0,1                Length of result
         ST    R0,EVALBLOCK_EVLEN     is always 1.
         LA    R1,PLIST            CALL
         L     R15,VSCCWC001          SCCWC001
         BALR  R14,R15                   to set condition code.
         BE    RTNXT               Presumtion was correct.
         MVI   EVALBLOCK_EVDATA,C'0'  Say 'not matched' in result.
         B     RTNXT
         SPACE 3
         TITLE            '<<                                          X
                     Subroutine to Strip Leading && Trailing Blanks >>'
* Registers upon entry
*    R10 ==> argument table entry
*    R14 ==> exit address when agrument is null
*    R14+4=> normal exit
*
* Registers upon exit
*    R10 ==> next argument table entry.
*    R2    = 0 (zero)
*    R3  ==> leftmost non-blank byte of argument
*    R4  ==> rightmost non-blank byte of argument
*    R15   = R4 - R3 (length of argument minus 1)
         SPACE 2
HEXFF    DC    X'FFFFFFFFFFFFFFFF'
         DS    XL1
TRTABLE  DS    XL256
TRT3     TRT   0(0,R3),TRTABLE
         SPACE 2
STRIP    DS    0H
         CLC   HEXFF,ARGTABLE_ARGSTRING_PTR  Is there an argument?
         BER   R14                              -no -
         L     R15,ARGTABLE_ARGSTRING_LENGTH
         L     R3,ARGTABLE_ARGSTRING_PTR  Get address of argument.
         LA    R10,ARGTABLE_NEXT   Point to next argument table entry.
         SPACE 1
         LTR   R15,R15             Does the argument have any length?
         BZR   R14                    -NO - take abnormal exit.
         LA    R4,0(R15,R3)        Point just beyond ARG.
         MVC   TRTABLE,TRTABLE-1   Set to
         MVI   TRTABLE+C' ',X'00'     bypass blanks.
         BCTR  R15,0               Set length for TRT instruction.
         EX    R15,TRT3            Skip to non-blank.
         BZR   R14                 When all blank.
         LR    R3,R1               Re-set starting address.
STRIP@R  DS    0H
         BCTR  R4,0                Backpedal 1 byte.
         CLI   0(R4),X'40'         (still) at a blanK?
         BNE   STRIPPED               -no -
         CR    R4,R3                  -yes-  More to inspect?
         BH    STRIP@R                          -yes-
STRIPPED DS    0H
         LR    R15,R4              Calculate
         SR    R15,R3                 length of ARG - 1.
         SR    R2,R2               Pre-clear R2 for TRT
         XC    TRTABLE,TRTABLE     Clear translate table.
         BC    15,4(,R14)          Take normal exit.
         TITLE            '<<                                          X
                                                   Error Conditions >>'
*
* Refer to the IRXSAY   routine; pages 336-339 of SC28-1883-06 -
* TSO Extentions Version 2  REXX/MVS Reference
*
SAY_LIT        DC    CL8'WRITE   '
SAY_BUFF       DS    A
SAY_LEN        DS    F
SAY_PLIST      DC    A(SAY_LIT,SAY_BUFF,SAY_LEN+X'80000000')
MISSING_MASK_MSG   DC C'First argument (MASK) missing.'
MISSING_TARGET_MSG DC C'Second argument (TARGET) missing.'
MISSING_MASK   DS    0H
         LA    R15,MISSING_MASK_MSG
         LA    R0,L'MISSING_MASK_MSG
         B     SAY_CALL
MISSING_TARGET DS    0H
         LA    R15,MISSING_TARGET_MSG
         LA    R0,L'MISSING_TARGET_MSG
         B     SAY_CALL
SAY_CALL DS    0H
         ST    R15,SAY_BUFF
         ST    R0,SAY_LEN
         LA    R1,SAY_PLIST
         LA    R0,ENVBLOCK
         L     R15,IRXSAY
         BALR  R14,R15
         L     R13,SAVEAREA+4
         XC    8(4,R13),8(R13)
         LM    R14,R12,12(R13)
         LA    R15,40
         BR    R14
         TITLE            '<<                                          X
                                              Global Data Constants >>'
         SPACE 2
         DS    0D
         SPACE 2
VSCCWC001 DC   V(SCCWC001)
         SPACE 1
PLIST    DC    A(0,LENGTH1,0,LENGTH2+X'80000000')
LENGTH1  DS    F
LENGTH2  DS    F
         SPACE 2
         LTORG
         TITLE            '<<                                          X
                                                 DSECTs and EQUates >>'
         YREGS
         SPACE 2
       IRXENVB
         SPACE 2
       IRXEXTE
         SPACE 2
       IRXEFPL
         SPACE 2
      IRXARGTB
         SPACE 2
      IRXEVALB
         END   WILDCARD
